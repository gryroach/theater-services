version: '3'
services:
  admin:
    build: movies
    container_name: movies_admin
    restart: always
    volumes:
      - static_volume:/opt/app/static
      - media_volume:/opt/app/media
    env_file:
      - ./.env
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy

  etl:
    build: etl
    container_name: movies_etl
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      es:
        condition: service_healthy
      redis:
        condition: service_healthy

  api:
    build: theater-async-api
    container_name: movies_api
    env_file:
      - ./.env
    expose:
      - "5000"
    volumes:
      - ./theater-async-api/src:/app/src
    depends_on:
      redis:
        condition: service_healthy
      es:
        condition: service_healthy

  api-auth:
    build: theater-auth
    image: movies-auth-image
    container_name: movies_auth
    env_file:
      - ./.env
    volumes:
      - ./theater-auth/src:/app/src
    expose:
      - "8000"
    depends_on:
      redis-auth:
        condition: service_healthy
      db-auth:
        condition: service_healthy

  nginx:
    image: nginx:latest
    container_name: movies_nginx
    restart: always
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/sites:/etc/nginx/conf.d:ro
      - ./configs/certs:/etc/nginx/certs:ro
      - static_volume:/opt/app/static
      - media_volume:/opt/app/media
    ports:
      - "80:80"
      - "443:443"

  db:
    image: postgres:16
    container_name: movies_db
    restart: always
    volumes:
      - ./database_dump.sql:/docker-entrypoint-initdb.d/init.sql
      - movies_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - 5436:5432
    expose:
      - "5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d ${DB_NAME}" ]
      interval: 5s
      retries: 5
      timeout: 5s

  db-auth:
    image: postgres:16
    container_name: movies_db_auth
    restart: always
    volumes:
      - movies_auth_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
    ports:
      - 5437:5432
    expose:
      - "5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d ${AUTH_POSTGRES_DB}" ]
      interval: 5s
      retries: 5
      timeout: 5s

  es:
    image: elasticsearch:8.6.2
    container_name: movies_es
    hostname: elasticsearch
    restart: always
    volumes:
      - movies_es:/usr/share/elasticsearch/data
    env_file:
      - ./.env
    expose:
      - "9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:9200 || exit 1"]
      interval: 5s
      retries: 5
      timeout: 5s

  redis:
    image: redis:7.4.1-alpine
    container_name: movies_redis
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 50


  redis-auth:
    image: redis:7.4.1-alpine
    container_name: movies_redis_auth
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 50

  test-auth:
    build: theater-auth
    image: movies-auth-image
    container_name: movies_auth_tests
    environment:
      - PYTHONPATH=/app
    entrypoint: "uv run pytest"
    env_file:
      - ./.env

  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: movies_jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14269:14269"
      - "14250:14250"
      - "9411:9411"
    restart: on-failure

volumes:
  movies_data:
  movies_auth_data:
  movies_es:
  static_volume:
  media_volume:
